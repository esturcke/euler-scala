package euler

/**
 * '''Even Fibonacci numbers'''
 *
 * [[http://projecteuler.net/problem=2 Project Euler Problem 2]]
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms
 * will be:
 *
 * {{{
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * }}}
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 *
 * '''Solution'''
 *
 * Given a Stream of Fibunacci numbers,
 * we take those less than four million and filter our the odd numbers and
 * then sum.
 */

object Problem2 extends Problem {

  def id    = 2
  def title = "Even Fibonacci numbers"

  private lazy val fib: Stream[Long] = 0 #:: 1 #:: fib.zip(fib.tail).map { n => n._1 + n._2 } 

  /** Returns the sum of even-valued Fibonacci numbers less than four million */
  def solve = ( fib takeWhile  { _ < 4000000 }
                    filter     { _ % 2 == 0  }
                    reduceLeft { _ + _       } )

}
